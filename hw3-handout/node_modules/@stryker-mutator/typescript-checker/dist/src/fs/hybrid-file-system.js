"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HybridFileSystem = void 0;
const tslib_1 = require("tslib");
const typescript_1 = (0, tslib_1.__importDefault)(require("typescript"));
const plugin_1 = require("@stryker-mutator/api/plugin");
const tsconfig_helpers_1 = require("../tsconfig-helpers");
const script_file_1 = require("./script-file");
/**
 * A very simple hybrid file system.
 * * Readonly from disk
 * * Writes in-memory
 * * Hard caching
 * * Ability to mutate one file
 */
class HybridFileSystem {
    constructor(log) {
        this.log = log;
        this.files = new Map();
    }
    writeFile(fileName, data) {
        fileName = (0, tsconfig_helpers_1.toPosixFileName)(fileName);
        const existingFile = this.files.get(fileName);
        if (existingFile) {
            existingFile.write(data);
        }
        else {
            this.log.trace('Writing to file "%s"', fileName);
            this.files.set(fileName, new script_file_1.ScriptFile(data, fileName));
        }
    }
    mutate(mutant) {
        const fileName = (0, tsconfig_helpers_1.toPosixFileName)(mutant.fileName);
        const file = this.files.get(fileName);
        if (!file) {
            throw new Error(`File "${mutant.fileName}" cannot be found.`);
        }
        if (this.mutatedFile && this.mutatedFile !== file) {
            this.mutatedFile.resetMutant();
        }
        file.mutate(mutant);
        this.mutatedFile = file;
    }
    watchFile(fileName, watcher) {
        const file = this.getFile(fileName);
        if (file) {
            this.log.trace('Registering watcher for file "%s"', fileName);
            file.watcher = watcher;
        }
    }
    getFile(fileName) {
        fileName = (0, tsconfig_helpers_1.toPosixFileName)(fileName);
        if (!this.files.has(fileName)) {
            const content = typescript_1.default.sys.readFile(fileName);
            if (typeof content === 'string') {
                const modifiedTime = typescript_1.default.sys.getModifiedTime(fileName);
                this.files.set(fileName, new script_file_1.ScriptFile(content, fileName, modifiedTime));
            }
            else {
                this.files.set(fileName, undefined);
            }
        }
        return this.files.get(fileName);
    }
    existsInMemory(fileName) {
        return !!this.files.get((0, tsconfig_helpers_1.toPosixFileName)(fileName));
    }
}
exports.HybridFileSystem = HybridFileSystem;
HybridFileSystem.inject = (0, plugin_1.tokens)(plugin_1.commonTokens.logger);
//# sourceMappingURL=hybrid-file-system.js.map